# -*- coding: utf-8 -*-
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  Author: Mauro Soria

from lib.reports import *
from lib.utils.FileUtils import *
import mysql.connector as mariadb
import requests
import hashlib


mariadb_connection = mariadb.connect(host = 'localhost',user = 'outpost',password = 'password',db = 'outpost')
cursor = mariadb_connection.cursor()


sitelist = '/root/pythonstuff/wordlist.txt'
wordlist = '/usr/share/wordlists/dirb/common.txt'


class DBReport(BaseReport):

    def generate(self):
        result = ''

        for path, status, contentLength in self.pathList:
        	dbStatus = '{0}  '.format(status)
        	dbLength = '{0}  '.format(FileUtils.sizeHuman(contentLength).rjust(6, ' '))
        	dbURL = '{0}://{1}:{2}/'.format(self.protocol, self.host, self.port)      

        	print(dbStatus, dbLength, dbURL)
   #         result += '{0}  '.format(status)
  #           result += '{0}://{1}:{2}/'.format(self.protocol, self.host, self.port)
#            result += ('{0}\n'.format(path) if self.basePath is '' else '{0}/{1}\n'.format(self.basePath, path))

   #     return result




'''
with open(sitelist) as f, open(wordlist) as w:
	for url in f:
		print(url)
		print(f)
		s = url.rstrip()
		print(s)
		print(s)
		print(w)
		r = requests.get(s)+w
		print(r)
		print(r.status_code)	
		#print(r.json)
		#print(r.headers)
		#print(r.text)
		pageHash = hashlib.sha256(r.text.encode('utf-8')).hexdigest()
		print(pageHash)
		status=r.status_code
		sha256=pageHash
		length=len(r.content)
		url=url.rstrip()
		cursor.execute("INSERT INTO scanner (status,hash,length,url) VALUES (%s,%s,%s,%s)", (status, sha256, length, url))
		mariadb_connection.commit()





class DBReport(BaseReport):

    def generate(self):
        result = ''

        for path, status, contentLength in self.pathList:
            result += '{0}  '.format(status)
            result += '{0}  '.format(FileUtils.sizeHuman(contentLength).rjust(6, ' '))
            result += '{0}://{1}:{2}/'.format(self.protocol, self.host, self.port)
            result += ('{0}\n'.format(path) if self.basePath is '' else '{0}/{1}\n'.format(self.basePath, path))

        return result



#############
class DBReport(BaseReport):

    def generate(self):
        result = ''

        for path, status, contentLength in self.pathList:
            result += '{0}  '.format(status)
            result += '{0}  '.format(FileUtils.sizeHuman(contentLength).rjust(6, ' '))
            result += '{0}://{1}:{2}/'.format(self.protocol, self.host, self.port)
            result += ('{0}\n'.format(path) if self.basePath is '' else '{0}/{1}\n'.format(self.basePath, path))

        return result
'''